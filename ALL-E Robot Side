//This is the Robot Side code for ALL-E.
//All of the code was written without any tutorials or instruction
//I did however use the Arduino official reference documentation for language syntax issues


#include <SoftwareSerial.h>
#include <Wire.h>
//I used the Adafruit motor shield to drive the four motors
#include <Adafruit_MotorShield.h>
#include "utility/Adafruit_PWMServoDriver.h"

//comm and ping are the variables I used to store the data sent over through the Xbee
int comm;
int ping;

int X = 0;
int Y = 0;

int xSpeed = 0;
int ySpeed = 0;

char mode;

//initialize the motor shield and open the motor ports
Adafruit_MotorShield AFMS = Adafruit_MotorShield();

Adafruit_DCMotor *Motor1 = AFMS.getMotor(1);
Adafruit_DCMotor *Motor2 = AFMS.getMotor(2);
Adafruit_DCMotor *Motor3 = AFMS.getMotor(3);
Adafruit_DCMotor *Motor4 = AFMS.getMotor(4);

//is just used for testing
int ledPin = 13;

//this is so I can load code and send data over the xbee at the same time
SoftwareSerial xBee(3,4);

void setup()
{
  //open computer communication for debugging
  Serial.begin(9600);
  
  //open the xbee communication
  xBee.begin(9600);
  
  //start the motor shield
  AFMS.begin();
  Motor1->setSpeed(255);
  Motor2->setSpeed(255);
  Motor3->setSpeed(255);
  Motor4->setSpeed(255);
  
  //Quick motor test (make sure everything is running)
  
  Motor1->run(FORWARD);
  Motor2->run(FORWARD);
  
  delay(1000);
  
  Motor1->run(RELEASE);
  Motor2->run(RELEASE);
  Motor3->run(RELEASE);
  Motor4->run(RELEASE);
  
  //setup status LED
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);
}

void loop()
{  
  /*
     ok so this is basically the same structure three times over. It goes:
     
     Robot Side       Controller Side
     Wait       <----     Ping
     Ping       <--->     Send data
     Ping       ---->     Wait
     
     This system makes sure the robot cannot lose syncronization with the controller
  */
  
  //ping
  while(!(comm == 120))
  {
    comm = xBee.read();
    delay(10);
  }
  //data (X value)
  while(!(comm < 58 && comm > 47))
  {
    comm = xBee.read();
    xBee.print('r');
    delay(10);
  }
  
  xSpeed = comm;
  
  //ping
  while(!(comm == 121))
  {
    comm = xBee.read();
    xBee.print('c');
    delay(10);
  }
  
  //data (Y value)
  while(!(comm < 58 && comm > 47))
  {
    comm = xBee.read();
    xBee.print('r');
    delay(10);
  }
  
  ySpeed = comm;
  
  //ping
  while(!(comm == 120))
  {
    comm = xBee.read();
    xBee.print('c');
    delay(10);
  }
  
  //data (rotation button)
  while(comm != '0' || comm != '1')
  {
    comm = Serial.read();
    Serial.print('c');
    delay(10);
  }
  
  mode = comm;
  
  comm = 0;
  
  xSpeed = xSpeed - 48;
  ySpeed = ySpeed - 48;
  
  //converting the X values to motor speeds and directions
  //sending the values over as a number between one and nine made the transmition over the xbee more reliable
  
  if(xSpeed > 5)
  {  
    xSpeed = xSpeed * 27;
    
    Motor2->setSpeed(xSpeed);
    Motor4->setSpeed(xSpeed);
    
    Motor2->run(FORWARD);
    Motor4->run(BACKWARD);
  }
  else if(xSpeed < 4)
  {
    xSpeed = 9 - xSpeed;
    xSpeed = xSpeed * 27;
    
    Motor2->setSpeed(xSpeed);
    Motor4->setSpeed(xSpeed);
    
    Motor2->run(BACKWARD);
    Motor4->run(FORWARD);
  }
  else
  {
    Motor2->run(RELEASE);
    Motor4->run(RELEASE);
  } 
  
  //now do the same with the Y values
  
  if(ySpeed > 5 && mode == '1')
  {  
    ySpeed = ySpeed * 27;
    
    Motor1->setSpeed(ySpeed);
    Motor3->setSpeed(ySpeed);
    
    Motor1->run(FORWARD);
    Motor3->run(BACKWARD);
  }
  else if(ySpeed > 5 && mode == '0')
  {  
    ySpeed = ySpeed * 27;
    
    Motor1->setSpeed(ySpeed);
    Motor3->setSpeed(ySpeed);
    
    Motor1->run(FORWARD);
    Motor3->run(FORWARD);
  }
  else if(ySpeed < 4 && mode == '1')
  {
    ySpeed = 9 - ySpeed;
    ySpeed = ySpeed * 27;
    
    Motor1->setSpeed(ySpeed);
    Motor3->setSpeed(ySpeed);
    
    Motor1->run(BACKWARD);
    Motor3->run(FORWARD);
  }
  else if(ySpeed < 4 && mode == '0')
  {
    ySpeed = 9 - ySpeed;
    ySpeed = ySpeed * 27;
    
    Motor1->setSpeed(ySpeed);
    Motor3->setSpeed(ySpeed);
    
    Motor1->run(BACKWARD);
    Motor3->run(BACKWARD);
  }
  else
  {
    Motor1->run(RELEASE);
    Motor3->run(RELEASE);
  }
  
}
